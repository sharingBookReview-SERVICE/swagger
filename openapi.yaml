openapi: 3.0.3
info:
  title: BNS
  description: This is BSN project.
  version: 1.0.0
servers:
  - url: http://13.124.63.103/api
tags:
  - name: book
    description: Everybook which have ISBN
    externalDocs:
      description: Find out more book
      url: ’www.google.com'
  - name: review
    description: reviews
  - name: comment
    description: Access to reviews
  - name: user
    description: Operations about user
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: integer
          format: int64
        nickname:
          type: string
        providerKey:
          type: string
        provider:
          type: string
        level:
          type: number
        exp:
          type: number
        followingCount:
          type: integer
        followerCount:
          type: integer
      example:
        _id: 61075765a1a5125bc82bbbb2
        provider: kakao
        providerKey: "1813460438"
        nickname: 나그네123
        level: 4
        exp: 22
        followingCount: 7
        followerCount: 11
    Comment:
      type: object
      properties:
        _id:
          type: integer
          format: int64
        content:
          type: string
        user:
          type: integer
          format: int64        
        created_at:
          type: string
          format: date-time
          readOnly: true
      example:
        _id: 61075765a1a5125bc82bbbv3
        content: 하하하 너무 재밌다.
        user: dfsao234
        created_at: "2021-08-02T05:02:11.135Z"
    Book:
      type: object
      properties:       
        reviews:
          type: array
          items:
            type: integer
            format: int64
        _id:
          type: integer
        title:
          type: string
        link:
          type: string
        image:
          type: string
        author:
          type: string
        price:
          type: integer
        discount:
          type: integer
        publisher:
          type: string
        pubdate:
          type: string
          format: date
          readOnly: true
        description:
          type: string
        topTags:
          type: array
          items:
            type: string
      example:        
        reviews: ["61056b9ad32a2e1895c2e677","61056dfdd190b51af3f06ab3"]
        _id: 9791158392239
        title: 모던 자바스크립트 Deep Dive
        link: http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&mallGb=KOR&barcode=9791158392239&orderClick=LAG&Kc=
        image: http://image.kyobobook.co.kr/images/book/large/239/l9791158392239.jpg
        author: 이웅모
        price: 45000
        discount: 0.1
        publisher: 비룡소
        pubdate: "20210120"
        description: "269개의 그림과 원리를 파헤치는 설명으로 ‘자바스크립트의 기본 개념과 동작 원리’를 이해하자!\n 웹페이지의 단순한 보조 기능을 처리하기 위한 제한적인 용도로 태어난 자바스크립트는 과도하다고 느껴질 만큼 친절한 프로그래밍 언어입니다. 이러한 자바스크립트의 특징은 편리한 경우도 있지만 내부 동작을 이해하기 어렵게 만들기도 합니다."
        topTags: ["기술", "자바스크립트"]
    Review:
      type: object
      properties:
        _id:
          type: integer
          format: int64
        hashtags:
          type: array
          items:
            type: string
        liked_users:
          type: array
          items:
            type: string
            format: int64
        quote:
          type: string
        content:
          type: string
        image:
          type: string
        book:
          $ref: "#/components/schemas/Book"
        user:
          type: integer
          format: int64
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"        
        created_at:
          type: string
          format: date-time
          readOnly: true
      example:        
        _id: "6107ad2f9d0ee58153aa1faf"
        hashtags: ["경제", "내가 처음 읽은 책"]
        liked_users: ["61075765a1a5125bc82bbbb2","61075765a1a5125bc82bbbv4"]
        quote: 우린 언제나 할 수 있을거야.
        content: 너무나 인상깊은 책 이였습니다. 다시 읽고 싶은 책이네요
        image: https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2F20150629_194%2Ftotobook9_1435557042721NTwQG_JPEG%2F%25BC%25F6%25B9%25DA%25BE%25BE-%2528%25C0%25D4%25C3%25BC%25C7%25A5%25C1%25F6%2529.jpg&type=sc960_832
        book: {
        reviews: ["61056b9ad32a2e1895c2e677","61056dfdd190b51af3f06ab3"],
        _id: 9791158392239,
        title: 모던 자바스크립트 Deep Dive,
        link: http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&mallGb=KOR&barcode=9791158392239&orderClick=LAG&Kc=,
        image: http://image.kyobobook.co.kr/images/book/large/239/l9791158392239.jpg,
        author: 이웅모,
        price: 45000,
        discount: 0.1,
        publisher: 비룡소,
        pubdate: "20210120",
        description: "269개의 그림과 원리를 파헤치는 설명으로 ‘자바스크립트의 기본 개념과 동작 원리’를 이해하자!\n 웹페이지의 단순한 보조 기능을 처리하기 위한 제한적인 용도로 태어난 자바스크립트는 과도하다고 느껴질 만큼 친절한 프로그래밍 언어입니다. 이러한 자바스크립트의 특징은 편리한 경우도 있지만 내부 동작을 이해하기 어렵게 만들기도 합니다."
        }
        user: 61075765a1a5125bc82bbbb2
        comments: [{
        id : 6107a92e9d0ee58153aa1fa8,
        content : 최고의책입니다!,
        user: 61075765a1a5125bc82bbbb2,
        created_at: "2021-08-02T05:02:11.135Z"},
        {id : 6107a92e9d0ee58153aa1fa8,
        content : 최고의책입니다!,
        user: 61075765a1a5125bc82bbbb2,
        created_at: "2021-08-02T05:02:11.135Z"
        }]
        created_at: "2021-08-02T05:02:11.135Z"
    Collection:
      type: object
      properties:
        _id:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
          enum: [tag]
        books:
          type: array
          items:
            $ref: "#/components/schemas/Book"
        user:
          $ref: "#/components/schemas/User"
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
        liked_users:
          type: array
          items:
            $ref: "#/components/schemas/User"
        created_at:
          type: string
          format: date-time
          readOnly: true
    Follow:
      type: object
      properties:
        _id:
          type: integer
          format: int64
        followee:
          $ref: "#/components/schemas/User"
        follower:
          $ref: "#/components/schemas/User"
        created_at:
          type: string
          format: date-time
          readOnly: true
paths:
  /books:
    get:
      summary: get booklist for search
      description: request data using query in path
      parameters:
        - name: target
          in: query
          required: true
          description: what kind of search target
          schema:
            type: string
        - name: query
          in: query
          required: true
          description: the value of search content
          schema:
            type: string
      tags:
        - book
      security:
        - bearerAuth:
          - 'authorization'
      responses:
        "200":
          description: response값
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /books/{bookId}:
    get:
      summary: get book for bookdetail
      description: request data using bookId which has book
      parameters:
        - name: bookId
          in: path
          required: true
          description: The Id of book which review have
          schema:
            type: integer
      tags:
        - book
      responses:
        "200":
          description: response값
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
  /books/bestseller:
    get:
      summary: get booklist for bestseller
      description: do not need request
      tags:
        - book
      responses:
        "200":
          description: response값
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /feeds:
    get:
      summary: get all feedes
      description: do not need request
      tags:
        - feed
      responses:
        "200":
          description: response 값
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
  /books/{bookId}/reviews:
    get:
      summary: Get reviews of a book
      description: request data using bookId
      tags:
        - review
      parameters:
        - name: bookId
          in: path
          required: true
          description: The Id of book which review have
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: response 값
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
    post:
      summary: post the review
      description: request data using bookId
      tags:
        - review
      parameters:
        - name: bookId
          in: path
          required: true
          description: The Id of book which review have
          schema:
            type: integer
            format: int64
      security:
        - bearerAuth:
          - 'authorization'
      responses:
        "200":
          description: Success
        "400":
          description: Invalid ID Supplied
        "405":
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: string
                image:
                  type: string
                quote:
                  type: string
                content:
                  type: string
                hashtags:
                  type: array
                  items:
                    type: string
            example:
              image: 'http://sample.com'
              quote: 'Sample quote'
              content: 'Review Content'
              hashtags: [ 'tagA', 'tagB', 'tagC' ]
  /books/{bookId}/reviews/{reviewId}:
    get:
      summary: get one review for review detail
      description: request data using reviewId, bookId
      tags:
        - review
      parameters:
        - name: bookId
          in: path
          required: true
          description: The Id of book which review have
          schema:
            type: integer
            format: int64
        - name: reviewId
          in: path
          required: true
          description: The Id of review which review have
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: response 값
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
    put:
      summary: put one review
      description: request data using bookId, reviewId
      tags:
        - review
      parameters:
        - name: bookId
          in: path
          required: true
          description: The Id of book which review have
          schema:
            type: integer
            format: int64
        - name: reviewId
          in: path
          required: true
          description: The Id of review which review have
          schema:
            type: integer
            format: int64
      security:
        - bearerAuth:
          - 'authorization'
      responses:
        "400":
          description: Invalid Id Supplied
        "404":
          description: Review not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quote:
                  type: string
                content:
                  type: string
                hashtags:
                  type: array
                  items:
                    type: string
                image:
                  type: string
            example:
              image: 'http://sample.com'
              quote: 'Sample quote'
              content: 'Review Content'
              hashtags: [ 'tagA', 'tagB', 'tagC' ]
    delete:
      summary: delete one review
      description: request data using bookId, reviewId
      tags:
        - review
      parameters:
        - name: bookId
          in: path
          required: true
          description: The Id of book which review have
          schema:
            type: integer
            format: int64
        - name: reviewId
          in: path
          required: true
          description: The Id of review which review have
          schema:
            type: integer
            format: int64
      security:
        - bearerAuth:
          - 'authorization'
      responses:
        "400":
          description: Invalid Id Supplied
        "404":
          description: Review not found
  /books/{bookId}/reviews/{reviewId}/likes:
    put:
      summary: Like or unlike a review
      description: Push into liked_users property or pull out of it.
      tags:
        - review
      parameters:
        - name: bookId
          in: path
          required: true
          description: The Id of book which review have
          schema:
            type: integer
            format: int64
        - name: reviewId
          in: path
          required: true
          description: The Id of review which review have
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Like success
          content:
            application/json:
              schema:
                type: object
                properties:
                  review:
                    $ref: "#/components/schemas/Review"
                  result:
                    type: string
                    example: "like / unlike"
        "400":
          description: Invalid Id Supplied
        "404":
          description: Review not found
      security:
        - bearerAuth:
          - 'authorization'
  /books/{bookId}/reviews/{reviewId}/comments:
    post:
      summary: Create a book comment.
      description: request bookId, reviewId.
      tags:
        - comment
      parameters:
        - name: bookId
          in: path
          required: true
          description: The Id of book which review have
          schema:
            type: integer
            format: int64
        - name: reviewId
          in: path
          required: true
          description: The Id of review which review have
          schema:
            type: integer
            format: int64
      responses:
        "201":
          description: Created Success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:                
                content:
                  type: string 
            example:
              content: 너무너무 좋아요!
      security:
        - bearerAuth:
          - 'authorization'       
  /books/{bookId}/reviews/{reviewId}/comments/{commentId}:
    patch:
      summary: modify comment.
      description: request bookId, reviewId,commentId.
      tags:
        - comment
      parameters:
        - name: bookId
          in: path
          required: true
          description: The Id of book which review have
          schema:
            type: integer
            format: int64
        - name: reviewId
          in: path
          required: true
          description: The Id of review which review have
          schema:
            type: integer
            format: int64
        - name: commentId
          in: path
          required: true
          description: The Id of comment which comment have
          schema:
            type: integer
            format: int64
      responses:
        "201":
          description: modified success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:                
                content:
                  type: string
            example:
              content: 너무너무 좋아요!
      security:
        - bearerAuth:
          - 'authorization'
    delete:
      summary: modify comment.
      description: request bookId, reviewId,commentId.
      tags:
        - comment
      parameters:
        - name: bookId
          in: path
          required: true
          description: The Id of book which review have
          schema:
            type: integer
            format: int64
        - name: reviewId
          in: path
          required: true
          description: The Id of review which review have
          schema:
            type: integer
            format: int64
        - name: commentId
          in: path
          required: true
          description: The Id of comment which comment have
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: response success.
      security:
        - bearerAuth:
          - 'authorization'
  /users/{provider}:
    post:
      tags:
        - user
      summary: create user (social login)
      description: request permission code
      responses:
        "200":
          description: success to login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  userImage:
                    type: string
                  nickname:
                    type: string      
  /users/{userId}:
    get:
      tags:
      - user
      summary: get user info
      description: request data using userId
      parameters:
        - name: userId
          in: path
          required: true
          description: The Id of user
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: response 값
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      tags:
      - user
      summary: put user info
      description: request data using userId
      parameters:
        - name: userId
          in: path
          required: true
          description: The Id of user
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
    delete:
      tags:
        - user
      summary: delete user
      description: request data using userId
      parameters:
        - name: userId
          in: path
          required: true
          description: The Id of user
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: success
  /users/{userId}/reviews:
    get:
      summary: Get user's reviews.
      description: Returns a list of reviews written by the user.
      tags:
        - user
      parameters:
        - name: userId
          in: path
          required: true
          description: User's ID
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: response success.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
      security:
        - bearerAuth:
          - 'authorization'
  /follow/followingList:
    get:
        summary: Get user's following list
        description: Returns a list of following
        tags:
          - follow
        responses:
          "200":
            description: response success.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Follow"
                example:
                  _id: '6107ad2f9d0ee58153aa1faf'
                  level: 3
                  nickname: '나그네'
        security:
          - bearerAuth:
            - 'authorization'
  /follow/followerList:
    get:
        summary: Get user's follower list
        description: Returns a list of follower
        tags:
          - follow
        responses:
          "200":
            description: response success.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Follow"
                example:
                  _id: '6107ad2f9d0ee58153aa1faf'
                  level: 3
                  nickname: '나그네'
        security:
          - bearerAuth:
            - 'authorization'
  /follow/{userId}:
    post:
      summary: switch follow
      description: request userId of followee
      tags:
        - follow
      parameters:
        - name: userId
          in: path
          required: true
          description: The Id of followee
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Created Success
          content:
            application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: boolean                
      security:
        - bearerAuth:
          - 'authorization'       

